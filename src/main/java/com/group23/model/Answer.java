package com.group23.model;

import jakarta.persistence.*;

/**
 * Represents an answer provided by a respondent to a specific question within a survey response.
 * This entity captures various types of answers, including open-ended text responses, numeric inputs,
 * and selections from multiple-choice options.
 *
 * Each {@code Answer} is associated with a {@link Response}, linking it to the overall survey response
 * provided by a participant. Depending on the question type, an answer may contain text, a numeric value,
 * or a selected option identifier.
 *
 * This entity is managed by JPA and maps to a corresponding table in the database, enabling CRUD
 * operations and relational mappings.
 *
 * @author Imad Mohamed
 * @version 1.0
 */
@Entity
public class Answer {

    /**
     * The unique identifier for this answer.
     * It is automatically generated by the database upon creation.
     *
     * @see GenerationType#IDENTITY
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The {@link Response} to which this answer belongs.
     * This establishes a many-to-one relationship between answers and responses,
     * indicating that multiple answers can be associated with a single response.
     */
    @ManyToOne
    private Response response;

    /**
     * The identifier of the question to which this answer corresponds.
     * This links the answer to a specific question within the survey.
     */
    private Long questionId;

    /**
     * The textual content of the answer.
     * This field is used for open-ended questions where respondents can provide free-form text.
     *
     * <p>For example, if the question is "What is your favorite feature of our product?",
     * the respondent's answer would be stored in this field.</p>
     */
    private String text; // For Open-Ended Questions

    /**
     * The numeric value of the answer.
     * This field is utilized for questions that require a numeric response,
     * such as rating scales or quantity inputs.
     *
     * <p>For instance, if the question is "Rate your satisfaction on a scale of 1 to 10",
     * the respondent's numeric rating would be stored here.</p>
     */
    private Integer number; // For Numeric Range Questions

    /**
     * The identifier of the selected option.
     * This field is relevant for multiple-choice questions where respondents select from predefined options.
     *
     * <p>For example, if the question is "Which of the following features do you use most frequently?"
     * and the respondent selects "Feature A", the ID corresponding to "Feature A" is stored in this field.</p>
     */
    private Long selectedOptionId; // For Multiple Choice Questions

    // Constructors, Getters, and Setters

    /**
     * Retrieves the unique identifier of this answer.
     *
     * @return the {@code id} of the answer
     */
    public Long getId() {
        return id;
    }

    /**
     * Retrieves the {@link Response} associated with this answer.
     *
     * @return the {@code response} to which this answer belongs
     */
    public Response getResponse() {
        return response;
    }

    /**
     * Associates this answer with a specific {@link Response}.
     *
     * @param response the {@code Response} to associate with this answer
     */
    public void setResponse(Response response) {
        this.response = response;
    }

    /**
     * Retrieves the identifier of the question associated with this answer.
     *
     * @return the {@code questionId} of the related question
     */
    public Long getQuestionId() {
        return questionId;
    }

    /**
     * Sets the identifier of the question for this answer.
     *
     * @param questionId the {@code questionId} to associate with this answer
     */
    public void setQuestionId(Long questionId) {
        this.questionId = questionId;
    }

    /**
     * Retrieves the textual content of this answer.
     *
     * @return the {@code text} response provided by the respondent
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the textual content of this answer.
     *
     * @param text the {@code text} response to store
     */
    public void setText(String text) {
        this.text = text;
    }

    /**
     * Retrieves the numeric value of this answer.
     *
     * @return the {@code number} provided by the respondent
     */
    public Integer getNumber() {
        return number;
    }

    /**
     * Sets the numeric value of this answer.
     *
     * @param number the {@code number} to store
     */
    public void setNumber(Integer number) {
        this.number = number;
    }

    /**
     * Retrieves the identifier of the selected option for this answer.
     *
     * @return the {@code selectedOptionId} representing the chosen option
     */
    public Long getSelectedOptionId() {
        return selectedOptionId;
    }

    /**
     * Sets the identifier of the selected option for this answer.
     *
     * @param selectedOptionId the {@code selectedOptionId} to associate with this answer
     */
    public void setSelectedOptionId(Long selectedOptionId) {
        this.selectedOptionId = selectedOptionId;
    }
}
