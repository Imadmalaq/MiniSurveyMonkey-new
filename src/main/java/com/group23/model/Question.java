package com.group23.model;

import jakarta.persistence.*;

/**
 * Abstract base class representing a question in a survey.
 *
 * <p>This class serves as the foundational entity for all types of questions within a survey,
 * encapsulating common attributes and behaviors shared across different question types.
 * It employs JPA inheritance to facilitate the creation of specialized question entities
 * such as {@link MultipleChoiceQuestion}, {@link NumericRangeQuestion}, and {@link OpenEndedQuestion}.</p>
 *
 * <p>The inheritance strategy used is {@link InheritanceType#JOINED}, which maps each subclass
 * to its own database table while sharing the primary key with the base {@code Question} table.
 * This approach normalizes the database schema and optimizes query performance for polymorphic
 * associations.</p>
 *
 * <p>The {@code @DiscriminatorColumn} annotation specifies the column used to differentiate
 * between various question types in the inheritance hierarchy. The {@code question_type}
 * column will store values that identify the specific subclass of each question entity.</p>
 *
 * <p><strong>Example Usage:</strong></p>
 * <pre>{@code
 * Survey survey = new Survey();
 * survey.setTitle("Customer Feedback Survey");
 *
 * MultipleChoiceQuestion mcQuestion = new MultipleChoiceQuestion();
 * mcQuestion.setText("How did you hear about us?");
 * mcQuestion.setSurvey(survey);
 * // Add options to mcQuestion
 *
 * NumericRangeQuestion nrQuestion = new NumericRangeQuestion();
 * nrQuestion.setText("Rate your satisfaction on a scale of 1 to 10.");
 * nrQuestion.setMinValue(1);
 * nrQuestion.setMaxValue(10);
 * nrQuestion.setSurvey(survey);
 *
 * OpenEndedQuestion oeQuestion = new OpenEndedQuestion();
 * oeQuestion.setText("Please provide any additional comments.");
 * oeQuestion.setSurvey(survey);
 *
 * // Save survey and questions to the repository
 * }</pre>
 *
 * @author
 * @version 1.0
 * @since 2024-04-27
 */
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@DiscriminatorColumn(name = "question_type")
public abstract class Question {

    /**
     * Unique identifier for the question.
     *
     * <p>This field serves as the primary key for the {@code Question} entity and is
     * automatically generated by the database upon insertion. It uniquely distinguishes
     * each question within the survey system.</p>
     *
     * @see GenerationType#IDENTITY
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The textual content of the question.
     *
     * <p>This field contains the actual question that will be presented to survey respondents.
     * It should be concise, clear, and unambiguous to ensure accurate and meaningful responses.</p>
     *
     * <p><strong>Example:</strong> "How satisfied are you with our customer service?"</p>
     */
    private String text;

    /**
     * The survey to which this question belongs.
     *
     * <p>This field establishes a many-to-one relationship between {@code Question} and {@code Survey},
     * indicating that multiple questions can be associated with a single survey. It facilitates
     * the organization and retrieval of questions within the context of their respective surveys.</p>
     */
    @ManyToOne
    @JoinColumn(name = "survey_id")
    private Survey survey;

    // Constructors

    /**
     * Default constructor for {@code Question}.
     *
     * <p>Initializes a new instance of the {@code Question} class. This constructor is required
     * by JPA for entity instantiation.</p>
     */
    public Question() {
        // Default constructor required by JPA
    }

    /**
     * Parameterized constructor for {@code Question}.
     *
     * <p>Allows the creation of a {@code Question} instance with specified text and associated survey.</p>
     *
     * @param text    the textual content of the question
     * @param survey  the {@code Survey} to which this question belongs
     */
    public Question(String text, Survey survey) {
        this.text = text;
        this.survey = survey;
    }

    // Getters and Setters

    /**
     * Retrieves the unique identifier of this question.
     *
     * @return the {@code id} of the question
     */
    public Long getId() {
        return id;
    }

    /**
     * Retrieves the textual content of this question.
     *
     * @return the {@code text} of the question
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the textual content of this question.
     *
     * <p>By setting the {@code text}, you define the specific question that will be displayed
     * to survey participants.</p>
     *
     * @param text the {@code text} to set for this question
     */
    public void setText(String text) {
        this.text = text;
    }

    /**
     * Retrieves the survey to which this question belongs.
     *
     * @return the {@code survey} associated with this question
     */
    public Survey getSurvey() {
        return survey;
    }

    /**
     * Associates this question with a specific survey.
     *
     * <p>By setting the {@code survey}, you link this question to a particular survey, enabling
     * the organization of questions within their respective surveys.</p>
     *
     * @param survey the {@code Survey} to associate with this question
     */
    public void setSurvey(Survey survey) {
        this.survey = survey;
    }


    /**
     * Provides a string representation of the {@code Question} instance.
     *
     * @return a string containing the class name and its properties
     */
    @Override
    public String toString() {
        return "Question{" +
                "id=" + id +
                ", text='" + text + '\'' +
                ", survey=" + (survey != null ? survey.getId() : null) +
                '}';
    }

    /**
     * Compares this {@code Question} with another object for equality.
     *
     * <p>Two {@code Question} instances are considered equal if they have the same {@code id},
     * {@code text}, and are associated with the same {@code Survey}.</p>
     *
     * @param o the object to compare with this {@code Question}
     * @return {@code true} if the objects are equal; {@code false} otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Question question = (Question) o;

        if (!id.equals(question.id)) return false;
        if (!text.equals(question.text)) return false;
        return survey != null ? survey.equals(question.survey) : question.survey == null;
    }

    /**
     * Computes the hash code for this {@code Question}.
     *
     * @return an integer hash code value for this object
     */
    @Override
    public int hashCode() {
        int result = id.hashCode();
        result = 31 * result + text.hashCode();
        result = 31 * result + (survey != null ? survey.hashCode() : 0);
        return result;
    }
}
